name: Deploy Production (Manual)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy (default: main)"
        required: false
        default: "main"
        type: string
      confirm:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string

jobs:
  validate-input:
    name: Validate Deployment Input
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [[ "${{ github.event.inputs.confirm }}" != "DEPLOY" ]]; then
            echo "❌ Confirmation failed. You must type 'DEPLOY' exactly to proceed."
            exit 1
          fi
          echo "✅ Deployment confirmed"

  deploy-production:
    name: Build and Deploy Production
    runs-on: ubuntu-latest
    needs: validate-input
    environment:
      name: production
    concurrency:
      group: production-deploy
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build base app (production mode)
        run: pnpm build --mode production
        env:
          VITE_AUTH_CLIENT_ID: ${{ vars.VITE_AUTH_CLIENT_ID }}
          VITE_AUTH_REDIRECT_URI: ${{ vars.VITE_AUTH_REDIRECT_URI }}
          VITE_AUTH_URI: ${{ vars.VITE_AUTH_URI }}
          VITE_IFRAME_OUTPUT_URI: ${{ vars.VITE_IFRAME_OUTPUT_URI }}
          VITE_LIVESTORE_SYNC_URL: ${{ vars.VITE_LIVESTORE_SYNC_URL }}
          VITE_RUNTIME_COMMAND: ${{ vars.VITE_RUNTIME_COMMAND }}
          VITE_GIT_COMMIT_HASH: ${{ github.sha }}

      - name: Build iframe outputs
        run: pnpm run build:iframe

      - name: Install iframe worker dependencies
        working-directory: iframe-outputs/worker
        run: pnpm install --frozen-lockfile

      - name: Apply database migrations (Production)
        run: pnpm wrangler d1 migrations apply DB --env production --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy base app to Production
        run: pnpm wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy iframe worker to Production
        working-directory: iframe-outputs/worker
        run: pnpm run deploy:production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base App:** https://app.runt.run" >> $GITHUB_STEP_SUMMARY
          echo "- **Iframe Outputs:** https://runtusercontent.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Both applications deployed successfully"
